package net.slqmy.first_plugin;

import com.google.gson.Gson;
import org.bukkit.*;
import org.bukkit.block.Block;
import org.bukkit.boss.BarColor;
import org.bukkit.boss.BarFlag;
import org.bukkit.boss.BarStyle;
import org.bukkit.boss.BossBar;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.*;
import org.bukkit.event.Listener;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.ShapedRecipe;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.CompassMeta;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.util.Transformation;
import org.joml.AxisAngle4f;
import org.joml.Vector3f;

import java.io.*;
import java.util.*;

public final class FirstPlugin extends JavaPlugin implements Listener {
	public final Map<UUID, UUID> recentMessages = new HashMap<>();

	@Override
	public void onEnable() {
		// Plugin startup logic.

		getDataFolder().mkdir();

		// If there is no config, one is generated by the plugin.
		getConfig().options().copyDefaults();
		saveDefaultConfig();

		// Maybe add support for a default configuration.
		// Or even better make a file manager.
		List tuple = initiateFile("data");

		boolean fileExists = (boolean) tuple.get(0);
		File file = (File) tuple.get(1);

		try {
			YamlConfiguration configuration = YamlConfiguration.loadConfiguration(file);

			if (!fileExists) {
				// Load default data;

				configuration.set("server-is-best", true);
				configuration.set("plugin-is-best", true);
				configuration.set("Car", "Ford");

				configuration.save(file);
			}

			// Do stuff with file here.
		} catch (Exception exception) {
			exception.printStackTrace();
		}

		File jsonFile = new File(getDataFolder(), "data.json");

		if (!jsonFile.exists()) {
			try {
				jsonFile.createNewFile();
			} catch (IOException exception) {
				System.out.println("Can't load data.json! Error: ");

				exception.printStackTrace();
			}
		}

		Data jsonData = new Data("Slqmy", "Hello world!", new Date());

		Gson gson = new Gson();

		try {
			Writer writer = new FileWriter(file, false);

			gson.toJson(jsonData, writer);

			writer.flush();
			writer.close();

			System.out.println("Successfully saved 'data.json'!");
		} catch (IOException exception) {
			System.out.println("Can't save data.json! Error: ");

			exception.printStackTrace();
		}

		try {
			Reader reader = new FileReader(file);

			Data data = gson.fromJson(reader, Data.class);

			System.out.println(data.getPlayerName());
			System.out.println(data.getMessage());
			System.out.println(data.getIsBestPlugin());
			System.out.println(data.getDate());
		} catch (FileNotFoundException exception) {
			System.out.println("Can't load data.json! Error: ");

			exception.printStackTrace();
		}

		// Handling commands.

		getCommand("heal").setExecutor(new HealCommand());
		getCommand("broadcast").setExecutor(new BroadcastCommand());
		getCommand("players").setExecutor(new PlayersCommand());
		getCommand("config").setExecutor(new ConfigCommand(this));
		getCommand("set-config").setExecutor(new SetConfigCommand(this));
		getCommand("secret-message").setExecutor(new SecretMessageCommand());
		getCommand("vanish").setExecutor(new VanishCommand(this));
		getCommand("give-guns").setExecutor(new GiveGuns());
		getCommand("give-book").setExecutor(new BookCommand());
		getCommand("give-banner").setExecutor(new BannerCommand());
		getCommand("punish").setExecutor(new PunishCommand());
		getCommand("message").setExecutor(new MessageCommand(recentMessages));
		getCommand("reply").setExecutor(new ReplyCommand(recentMessages));
		getCommand("menu").setExecutor(new MenuCommand());
		getCommand("hypixel-menu").setExecutor(new HypixelMenuCommand());
		getCommand("mc-complex-menu-command").setExecutor(new McComplexMenuCommand());
		getCommand("buff").setExecutor(new BuffCommand());
		getCommand("skull").setExecutor(new SkullCommand());
		getCommand("custom-skull").setExecutor(new CustomSkullCommand());
		getCommand("cool-down").setExecutor(new CooldownCommand());
		getCommand("hologram").setExecutor(new HologramCommand());
		getCommand("permissions").setExecutor(new PermissionsCommand(this));

		getCommand("fruit").setExecutor(new FruitCommand());
		getCommand("fruit").setTabCompleter(new FruitTabCompleter());

		// Really easy to make recipes:

		ShapedRecipe diamondSwordRecipe = new ShapedRecipe(new NamespacedKey(this, "custom_diamond_sword"), new ItemStack(Material.DIAMOND_SWORD));

		diamondSwordRecipe.shape(
						" D ",
						" D ",
						" D "
		);

		diamondSwordRecipe.setIngredient('D', Material.DIAMOND);

		Bukkit.addRecipe(diamondSwordRecipe);

		ShapedRecipe elytraRecipe = new ShapedRecipe(new NamespacedKey(this, "custom_elytra"), new ItemStack(Material.ELYTRA));

		elytraRecipe.shape(
						" L ",
						"PNP",
						"L L"
		);

		elytraRecipe.setIngredient('L', Material.LEATHER);
		elytraRecipe.setIngredient('P', Material.PHANTOM_MEMBRANE);
		elytraRecipe.setIngredient('N', Material.NETHER_STAR);

		Bukkit.addRecipe(elytraRecipe);

		ShapedRecipe barrierRecipe = new ShapedRecipe(new NamespacedKey(this, "custom_barrier"), new ItemStack(Material.BARRIER));

		barrierRecipe.shape(
						"R R",
						" R ",
						"R R"
		);

		barrierRecipe.setIngredient('R', Material.RED_CONCRETE);

		Bukkit.addRecipe(barrierRecipe);

		ItemStack customStick = new ItemStack(Material.STICK);

		ItemMeta stickMeta = customStick.getItemMeta();
		stickMeta.setDisplayName(ChatColor.GREEN.toString() + ChatColor.BOLD + "Epic Stick!");
		stickMeta.addEnchant(Enchantment.DAMAGE_ALL,6,true);

		customStick.setItemMeta(stickMeta);

		ShapedRecipe stickRecipe = new ShapedRecipe(new NamespacedKey(this, "custom_stick"), customStick);

		stickRecipe.shape(
						"GGG",
						"GSG",
						"GGG"
		);

		stickRecipe.setIngredient('G', Material.GOLD_BLOCK);
		stickRecipe.setIngredient('S', Material.STICK);

		Bukkit.addRecipe(stickRecipe);

		BossBar bossBar = Bukkit.createBossBar(
						ChatColor.LIGHT_PURPLE + "Wither Storm",
						BarColor.RED,
						BarStyle.SEGMENTED_20,
						BarFlag.CREATE_FOG
					// 	BarFlag.DARKEN_SKY,
					// 	BarFlag.PLAY_BOSS_MUSIC - seems not to do anything, I might be wrong.
		);

		bossBar.setProgress(0.5f);

		Bukkit.getPluginManager().registerEvents(new Events(this, bossBar, recentMessages), this);

		System.out.println("The plugin 'FirstPlugin' has been been enabled!");

		//	ItemStack sponge = new ItemStack(Material.SPONGE);
		//
		//	ItemMeta spongeMeta = sponge.getItemMeta();
		//	spongeMeta.getPersistentDataContainer();

		// Bukkit.getWorld("world").getBlockAt(1, 1, 1).getState();
		// Determine what it is.
		// E, g. sign.
		// sign.getPersistentDataContainer();

		// ! VERY IMPORTANT!
		// block.update();
		// FOR ALL TILE ENTITIES.

		String worldName = "world";
		World world = Bukkit.getWorld(worldName);

		// TEXT DISPLAY

		TextDisplay textDisplay = (TextDisplay) world.spawnEntity(world.getBlockAt(-10, 100, 100).getLocation(), EntityType.TEXT_DISPLAY);

		textDisplay.setViewRange(3);
		textDisplay.setBrightness(new Display.Brightness(14, 14));
		textDisplay.setShadowed(true);
		textDisplay.setTransformation(new Transformation(new Vector3f(10, 20, 30), new AxisAngle4f((float) Math.PI / 4, 1, 0, 1), new Vector3f(10, 2, 5), new AxisAngle4f(-(float) Math.PI / 4, 0, 1, 0)));
		textDisplay.setBillboard(Display.Billboard.CENTER);
		textDisplay.setText(ChatColor.GREEN.toString() + ChatColor.BOLD + "--THE-SLIMY-SWAMP--");
		textDisplay.setTextOpacity((byte) 64);
		textDisplay.setLineWidth(3000);
		textDisplay.setSeeThrough(true);

		// BLOCK DISPLAY

		BlockDisplay blockDisplay = (BlockDisplay) world.spawnEntity(world.getBlockAt(0, 100, 100).getLocation(), EntityType.BLOCK_DISPLAY);
		blockDisplay.setBlock(Material.END_PORTAL_FRAME.createBlockData());
		blockDisplay.setBrightness(new Display.Brightness(10, 10));

		// ITEM DISPLAY

		ItemDisplay itemDisplay = (ItemDisplay) world.spawnEntity(world.getBlockAt(-100, 100, 0).getLocation(), EntityType.ITEM_DISPLAY);
		itemDisplay.setItemStack(new ItemStack(Material.DIAMOND_SWORD)); // Can use item meta here!
		itemDisplay.setItemDisplayTransform(ItemDisplay.ItemDisplayTransform.HEAD);

		Entity bee = world.spawnEntity(new Location(world, 0, 120, 0), EntityType.BEE);

		bee.setCustomName("Bee Bro");
		bee.setGlowing(true);

		ArmorStand armourStand = (ArmorStand)world.spawnEntity(new Location(world, 0, 120, 0), EntityType.ARMOR_STAND);

		armourStand.setArms(true);

		// armourStand.remove();

		ItemStack itemStack = new ItemStack(Material.NETHERITE_INGOT, 4);
		ItemMeta meta = itemStack.getItemMeta();

		meta.setDisplayName("Free Netherite!");

		itemStack.setItemMeta(meta);

		Block block = world.getBlockAt(15, 15, 15);
		System.out.println(block.getType().equals(Material.STONE));

		block.setType(Material.DIAMOND_BLOCK);

		ItemStack books = new ItemStack(Material.WRITTEN_BOOK, 3);
		BookMeta bookMeta = (BookMeta) books.getItemMeta();

		itemStack.setItemMeta(bookMeta);

		ItemStack compass = new ItemStack(Material.COMPASS);
		CompassMeta compassMeta = (CompassMeta) compass.getItemMeta();

		compass.setItemMeta(compassMeta);

		// Will create a world. If the world already exists, it will just load that world.
		// Bukkit.createWorld(new WorldCreator("bedwars-4032"));

		// Use WorldLoadEvent to check when the world has loaded.

		// Can also use player.getWorld();

		// Rain.
		// world.setStorm(true);

		world.setThundering(true);
		world.setThunderDuration(100);

		// 00000 = 06:00.
		// 60000 = 12:00.
		// 12000 = 18:00.
		// 18000 = 24:00.
		world.setTime(6000);

		/* BukkitTask bukkitTask = */ Bukkit.getScheduler().runTaskLater/*Asynchronously*/(this, () -> {
			for (Player onlinePlayer : Bukkit.getOnlinePlayers()) {
				onlinePlayer.sendMessage("Server has started! Up for 10 seconds and counting.");
			}
		}, 200L);

		// bukkitTask.cancel();

		Bukkit.getScheduler().runTaskTimer/*Asynchronously*/(this, () -> {
			for (Player onlinePlayer : Bukkit.getOnlinePlayers()) {
				onlinePlayer.sendMessage("This executes every 1500 seconds! And 10 seconds after the server has started.");
			}
		}, 200, 30000);


		// Reading errors and debugging lesson:

		/*

		String[] strings = new String[]{ "Hello", worldName, "There", "Apple" };
		String string = strings[4];

		Player player = null;
		player.sendMessage("Hello, this will totally work, right?");

		String[] strings = new String[]{ "Hi", "Hello", "Welcome", "Apple" };

		System.out.println("Got to stage 1.");

		System.out.println(strings[0]);

		System.out.println("Got to stage 2.");

		System.out.println(strings[2]);

		System.out.println("Got to stage 3.");

		// System.out.println(strings[3]);

		System.out.println("Got to stage 4.");

		System.out.println(strings[1]);

		System.out.println("Done!");

		*/
	}

	@Override
	public void onDisable() {
		// Plugin shutdown logic.
	}

	private List initiateFile(String name) {
		File file = new File(getDataFolder(), name + ".yml");

		boolean fileExists = file.exists();

		if (fileExists) {
			try {
				file.createNewFile();
			} catch (IOException exception) {
				System.out.println("Can't load " + name + ".yml! Error: ");

				exception.printStackTrace();
			}
		}

		List tuple = new ArrayList<>();

		tuple.add(fileExists);
		tuple.add(file);

		return tuple;
	}
}
